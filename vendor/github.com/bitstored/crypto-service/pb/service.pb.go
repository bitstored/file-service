// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	File
	EncryptFileRequest
	EncryptFileResponse
	DecryptFileRequest
	DecryptFileResponse
	EncryptPasswordRequest
	EncryptPasswordResponse
	EncryptRequest
	EncryptResponse
	DecryptRequest
	DecryptResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type File struct {
	Content      []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	SecretPhrase []byte `protobuf:"bytes,2,opt,name=secret_phrase,json=secretPhrase,proto3" json:"secret_phrase,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *File) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *File) GetSecretPhrase() []byte {
	if m != nil {
		return m.SecretPhrase
	}
	return nil
}

type EncryptFileRequest struct {
	OriginalFile *File  `protobuf:"bytes,1,opt,name=original_file,json=originalFile" json:"original_file,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *EncryptFileRequest) Reset()                    { *m = EncryptFileRequest{} }
func (m *EncryptFileRequest) String() string            { return proto.CompactTextString(m) }
func (*EncryptFileRequest) ProtoMessage()               {}
func (*EncryptFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EncryptFileRequest) GetOriginalFile() *File {
	if m != nil {
		return m.OriginalFile
	}
	return nil
}

func (m *EncryptFileRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type EncryptFileResponse struct {
	ResponseCode    int32  `protobuf:"varint,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	EncryptedData   []byte `protobuf:"bytes,3,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
}

func (m *EncryptFileResponse) Reset()                    { *m = EncryptFileResponse{} }
func (m *EncryptFileResponse) String() string            { return proto.CompactTextString(m) }
func (*EncryptFileResponse) ProtoMessage()               {}
func (*EncryptFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EncryptFileResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *EncryptFileResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *EncryptFileResponse) GetEncryptedData() []byte {
	if m != nil {
		return m.EncryptedData
	}
	return nil
}

type DecryptFileRequest struct {
	EncryptedFile *File  `protobuf:"bytes,1,opt,name=encrypted_file,json=encryptedFile" json:"encrypted_file,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SecretPhrase  []byte `protobuf:"bytes,3,opt,name=secret_phrase,json=secretPhrase,proto3" json:"secret_phrase,omitempty"`
}

func (m *DecryptFileRequest) Reset()                    { *m = DecryptFileRequest{} }
func (m *DecryptFileRequest) String() string            { return proto.CompactTextString(m) }
func (*DecryptFileRequest) ProtoMessage()               {}
func (*DecryptFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DecryptFileRequest) GetEncryptedFile() *File {
	if m != nil {
		return m.EncryptedFile
	}
	return nil
}

func (m *DecryptFileRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DecryptFileRequest) GetSecretPhrase() []byte {
	if m != nil {
		return m.SecretPhrase
	}
	return nil
}

type DecryptFileResponse struct {
	ResponseCode    int32  `protobuf:"varint,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	OriginalData    []byte `protobuf:"bytes,3,opt,name=original_data,json=originalData,proto3" json:"original_data,omitempty"`
}

func (m *DecryptFileResponse) Reset()                    { *m = DecryptFileResponse{} }
func (m *DecryptFileResponse) String() string            { return proto.CompactTextString(m) }
func (*DecryptFileResponse) ProtoMessage()               {}
func (*DecryptFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DecryptFileResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *DecryptFileResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *DecryptFileResponse) GetOriginalData() []byte {
	if m != nil {
		return m.OriginalData
	}
	return nil
}

type EncryptPasswordRequest struct {
	Password       []byte `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	IterationCount int32  `protobuf:"varint,2,opt,name=iteration_count,json=iterationCount" json:"iteration_count,omitempty"`
	Salt           []byte `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *EncryptPasswordRequest) Reset()                    { *m = EncryptPasswordRequest{} }
func (m *EncryptPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*EncryptPasswordRequest) ProtoMessage()               {}
func (*EncryptPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EncryptPasswordRequest) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *EncryptPasswordRequest) GetIterationCount() int32 {
	if m != nil {
		return m.IterationCount
	}
	return 0
}

func (m *EncryptPasswordRequest) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

type EncryptPasswordResponse struct {
	ResponseCode    int32  `protobuf:"varint,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	Password        []byte `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *EncryptPasswordResponse) Reset()                    { *m = EncryptPasswordResponse{} }
func (m *EncryptPasswordResponse) String() string            { return proto.CompactTextString(m) }
func (*EncryptPasswordResponse) ProtoMessage()               {}
func (*EncryptPasswordResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EncryptPasswordResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *EncryptPasswordResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *EncryptPasswordResponse) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

type EncryptRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Salt []byte `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *EncryptRequest) Reset()                    { *m = EncryptRequest{} }
func (m *EncryptRequest) String() string            { return proto.CompactTextString(m) }
func (*EncryptRequest) ProtoMessage()               {}
func (*EncryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EncryptRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EncryptRequest) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

type EncryptResponse struct {
	ResponseCode    int32  `protobuf:"varint,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	Data            []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EncryptResponse) Reset()                    { *m = EncryptResponse{} }
func (m *EncryptResponse) String() string            { return proto.CompactTextString(m) }
func (*EncryptResponse) ProtoMessage()               {}
func (*EncryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EncryptResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *EncryptResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *EncryptResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DecryptRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Salt []byte `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *DecryptRequest) Reset()                    { *m = DecryptRequest{} }
func (m *DecryptRequest) String() string            { return proto.CompactTextString(m) }
func (*DecryptRequest) ProtoMessage()               {}
func (*DecryptRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DecryptRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DecryptRequest) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

type DecryptResponse struct {
	ResponseCode    int32  `protobuf:"varint,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	Data            []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DecryptResponse) Reset()                    { *m = DecryptResponse{} }
func (m *DecryptResponse) String() string            { return proto.CompactTextString(m) }
func (*DecryptResponse) ProtoMessage()               {}
func (*DecryptResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DecryptResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *DecryptResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *DecryptResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*File)(nil), "crypto_service.File")
	proto.RegisterType((*EncryptFileRequest)(nil), "crypto_service.EncryptFileRequest")
	proto.RegisterType((*EncryptFileResponse)(nil), "crypto_service.EncryptFileResponse")
	proto.RegisterType((*DecryptFileRequest)(nil), "crypto_service.DecryptFileRequest")
	proto.RegisterType((*DecryptFileResponse)(nil), "crypto_service.DecryptFileResponse")
	proto.RegisterType((*EncryptPasswordRequest)(nil), "crypto_service.EncryptPasswordRequest")
	proto.RegisterType((*EncryptPasswordResponse)(nil), "crypto_service.EncryptPasswordResponse")
	proto.RegisterType((*EncryptRequest)(nil), "crypto_service.EncryptRequest")
	proto.RegisterType((*EncryptResponse)(nil), "crypto_service.EncryptResponse")
	proto.RegisterType((*DecryptRequest)(nil), "crypto_service.DecryptRequest")
	proto.RegisterType((*DecryptResponse)(nil), "crypto_service.DecryptResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Crypto service

type CryptoClient interface {
	EncryptFile(ctx context.Context, in *EncryptFileRequest, opts ...grpc.CallOption) (*EncryptFileResponse, error)
	DecryptFile(ctx context.Context, in *DecryptFileRequest, opts ...grpc.CallOption) (*DecryptFileResponse, error)
	EncryptPassword(ctx context.Context, in *EncryptPasswordRequest, opts ...grpc.CallOption) (*EncryptPasswordResponse, error)
	Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error)
	Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error)
}

type cryptoClient struct {
	cc *grpc.ClientConn
}

func NewCryptoClient(cc *grpc.ClientConn) CryptoClient {
	return &cryptoClient{cc}
}

func (c *cryptoClient) EncryptFile(ctx context.Context, in *EncryptFileRequest, opts ...grpc.CallOption) (*EncryptFileResponse, error) {
	out := new(EncryptFileResponse)
	err := grpc.Invoke(ctx, "/crypto_service.Crypto/EncryptFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) DecryptFile(ctx context.Context, in *DecryptFileRequest, opts ...grpc.CallOption) (*DecryptFileResponse, error) {
	out := new(DecryptFileResponse)
	err := grpc.Invoke(ctx, "/crypto_service.Crypto/DecryptFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) EncryptPassword(ctx context.Context, in *EncryptPasswordRequest, opts ...grpc.CallOption) (*EncryptPasswordResponse, error) {
	out := new(EncryptPasswordResponse)
	err := grpc.Invoke(ctx, "/crypto_service.Crypto/EncryptPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error) {
	out := new(EncryptResponse)
	err := grpc.Invoke(ctx, "/crypto_service.Crypto/Encrypt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error) {
	out := new(DecryptResponse)
	err := grpc.Invoke(ctx, "/crypto_service.Crypto/Decrypt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Crypto service

type CryptoServer interface {
	EncryptFile(context.Context, *EncryptFileRequest) (*EncryptFileResponse, error)
	DecryptFile(context.Context, *DecryptFileRequest) (*DecryptFileResponse, error)
	EncryptPassword(context.Context, *EncryptPasswordRequest) (*EncryptPasswordResponse, error)
	Encrypt(context.Context, *EncryptRequest) (*EncryptResponse, error)
	Decrypt(context.Context, *DecryptRequest) (*DecryptResponse, error)
}

func RegisterCryptoServer(s *grpc.Server, srv CryptoServer) {
	s.RegisterService(&_Crypto_serviceDesc, srv)
}

func _Crypto_EncryptFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).EncryptFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto_service.Crypto/EncryptFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).EncryptFile(ctx, req.(*EncryptFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_DecryptFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).DecryptFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto_service.Crypto/DecryptFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).DecryptFile(ctx, req.(*DecryptFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_EncryptPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).EncryptPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto_service.Crypto/EncryptPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).EncryptPassword(ctx, req.(*EncryptPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto_service.Crypto/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).Encrypt(ctx, req.(*EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto_service.Crypto/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).Decrypt(ctx, req.(*DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crypto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crypto_service.Crypto",
	HandlerType: (*CryptoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncryptFile",
			Handler:    _Crypto_EncryptFile_Handler,
		},
		{
			MethodName: "DecryptFile",
			Handler:    _Crypto_DecryptFile_Handler,
		},
		{
			MethodName: "EncryptPassword",
			Handler:    _Crypto_EncryptPassword_Handler,
		},
		{
			MethodName: "Encrypt",
			Handler:    _Crypto_Encrypt_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _Crypto_Decrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0x6e, 0x9a, 0xae, 0x85, 0x77, 0xfd, 0x40, 0x1e, 0x62, 0x55, 0x0f, 0x80, 0x5c, 0xc1, 0xe0,
	0xd2, 0xc3, 0xb8, 0x80, 0xb8, 0xd1, 0x0d, 0x09, 0x09, 0xa4, 0x29, 0x27, 0xc4, 0x25, 0xf2, 0x92,
	0x97, 0x2d, 0x52, 0x89, 0x33, 0xdb, 0x01, 0xf1, 0x03, 0xb8, 0x20, 0x24, 0xfe, 0x11, 0xbf, 0x0d,
	0xc5, 0xb1, 0xbd, 0xa4, 0x5e, 0x57, 0x09, 0xa9, 0xdc, 0xec, 0xc7, 0xf6, 0xf3, 0x3e, 0xcf, 0xfb,
	0x91, 0xc0, 0x48, 0xa2, 0xf8, 0x9a, 0x25, 0xb8, 0x28, 0x04, 0x57, 0x9c, 0x8c, 0x13, 0xf1, 0xbd,
	0x50, 0x3c, 0x36, 0x28, 0x3d, 0x85, 0xde, 0xdb, 0x6c, 0x85, 0x64, 0x0a, 0x83, 0x84, 0xe7, 0x0a,
	0x73, 0x35, 0x0d, 0x1e, 0x07, 0xcf, 0x86, 0x91, 0xdd, 0x92, 0x79, 0x45, 0x91, 0x08, 0x54, 0x71,
	0x71, 0x29, 0x98, 0xc4, 0x69, 0x57, 0x9f, 0x0f, 0x6b, 0xf0, 0x4c, 0x63, 0xf4, 0x12, 0xc8, 0x69,
	0xae, 0xa9, 0x2b, 0xb6, 0x08, 0xaf, 0x4a, 0x94, 0x8a, 0xbc, 0x82, 0x11, 0x17, 0xd9, 0x45, 0x96,
	0xb3, 0x55, 0xfc, 0x39, 0x5b, 0xa1, 0xa6, 0xde, 0x3f, 0xbe, 0xbf, 0x68, 0x8b, 0x58, 0xe8, 0x37,
	0x43, 0x7b, 0x55, 0xeb, 0x39, 0x84, 0x41, 0x29, 0x51, 0xc4, 0x59, 0xaa, 0xe3, 0xdd, 0x8d, 0xfa,
	0xd5, 0xf6, 0x5d, 0x4a, 0x7f, 0x05, 0x70, 0xd0, 0x0a, 0x25, 0x0b, 0x9e, 0x4b, 0xac, 0x64, 0x0a,
	0xb3, 0x8e, 0x13, 0x9e, 0xd6, 0xb1, 0xf6, 0xa2, 0xa1, 0x05, 0x97, 0x3c, 0x45, 0xf2, 0x1c, 0xee,
	0xb9, 0x4b, 0x5f, 0x50, 0x4a, 0x76, 0x81, 0x86, 0x7e, 0x62, 0xf1, 0x0f, 0x35, 0x4c, 0x9e, 0xc0,
	0x18, 0xeb, 0x30, 0x98, 0xc6, 0x29, 0x53, 0x6c, 0x1a, 0x6a, 0xdf, 0x23, 0x87, 0x9e, 0x30, 0xc5,
	0xe8, 0xef, 0x00, 0xc8, 0x09, 0x7a, 0xce, 0x5f, 0x37, 0x5f, 0x6f, 0xb5, 0x7e, 0xcd, 0x79, 0xab,
	0x77, 0xbf, 0x14, 0xe1, 0x0d, 0xa5, 0xf8, 0x19, 0xc0, 0x41, 0x4b, 0xd1, 0x8e, 0x12, 0x34, 0x6f,
	0x14, 0xb7, 0x91, 0x1f, 0x57, 0x46, 0x9d, 0x9e, 0x2b, 0x78, 0x60, 0x8a, 0x75, 0xc6, 0xa4, 0xfc,
	0xc6, 0x45, 0x6a, 0x33, 0x34, 0x83, 0x3b, 0x85, 0x81, 0x4c, 0xc7, 0xb9, 0x3d, 0x39, 0x82, 0x49,
	0xa6, 0x50, 0x30, 0x95, 0xf1, 0x3c, 0x4e, 0x78, 0x99, 0x2b, 0x2d, 0x62, 0x2f, 0x1a, 0x3b, 0x78,
	0x59, 0xa1, 0x84, 0x40, 0x4f, 0xb2, 0x95, 0x32, 0xa1, 0xf5, 0x9a, 0xfe, 0x08, 0xe0, 0xd0, 0x8b,
	0xb9, 0xa3, 0x1c, 0x34, 0x4d, 0x84, 0x6d, 0x13, 0xf4, 0x25, 0x8c, 0x8d, 0x0c, 0x6b, 0x99, 0x40,
	0x4f, 0x27, 0xaa, 0xb6, 0xab, 0xd7, 0xce, 0x41, 0xb7, 0xe1, 0xa0, 0x84, 0x89, 0x7b, 0xb9, 0x23,
	0xe1, 0x56, 0x4a, 0x78, 0x2d, 0xa5, 0x12, 0x6c, 0xfa, 0xe6, 0x1f, 0x04, 0xbb, 0x97, 0xff, 0x4f,
	0xf0, 0xf1, 0x9f, 0x10, 0xfa, 0x4b, 0x3d, 0x4e, 0xe4, 0x23, 0xec, 0x37, 0x3e, 0x0a, 0x84, 0xae,
	0x8f, 0x99, 0xff, 0x71, 0x9a, 0xcd, 0x6f, 0xbd, 0x53, 0x47, 0xa7, 0x9d, 0x8a, 0xb9, 0x31, 0x4d,
	0x3e, 0xb3, 0x3f, 0xfc, 0x3e, 0xf3, 0x0d, 0xe3, 0x48, 0x3b, 0x24, 0x75, 0x65, 0xb6, 0x7d, 0x4a,
	0x9e, 0x6e, 0xd0, 0xb4, 0x36, 0x3c, 0xb3, 0xa3, 0xad, 0xf7, 0x5c, 0x94, 0xf7, 0x30, 0x30, 0x87,
	0xe4, 0xe1, 0x86, 0x57, 0x96, 0xf5, 0xd1, 0xc6, 0xf3, 0x26, 0x9b, 0x31, 0xe3, 0xb3, 0xb5, 0x9b,
	0xc7, 0x67, 0x5b, 0x6b, 0x11, 0xda, 0x79, 0xd3, 0xfb, 0xd4, 0x2d, 0xce, 0xcf, 0xfb, 0xfa, 0xcf,
	0xf4, 0xe2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x46, 0x0d, 0x48, 0xcf, 0xaa, 0x06, 0x00, 0x00,
}
