syntax = "proto3";

package file_service;
option go_package="pb";
import "google/api/annotations.proto";

service FileManagement {
    rpc CreateDrive(CreateDriveRequest) returns (CreateDriveResponse) {
		option (google.api.http) = {
            post: "/files/api/v1/drive/create"
            body: "*"
        };
	}
    rpc CreateNewFile(CreateNewFileRequest) returns (CreateNewFileResponse) {
		option (google.api.http) = {
            post: "/files/api/v1/file/create"
            body: "*"
        };
	}
    rpc CreateNewFolder(CreateNewFolderRequest) returns (CreateNewFolderResponse) {
		option (google.api.http) = {
            post: "/files/api/v1/folder/create"
            body: "*"
        };
	}
    rpc GetFolderContent(GetFolderContentRequest) returns (GetFolderContentResponse) {
		option (google.api.http) = {
            get: "/files/api/v1/folder/content"
        };
	}
    rpc GetFileContent(GetFileContentRequest) returns (GetFileContentResponse) {
		option (google.api.http) = {
            get: "/files/api/v1/file/content"
        };
	}
    rpc GetFileTree(GetFileTreeRequest) returns (GetFileTreeResponse) {
		option (google.api.http) = {
            get: "/files/api/v1/drive/tree"
        };
	}
    rpc UpdateFileContent(UpdateFileContentRequest) returns (UpdateFileContentResponse) {
		option (google.api.http) = {
            post: "/files/api/v1/file/update"
            body: "*"
        };
	}
    rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse) {
		option (google.api.http) = {
            post: "/files/api/v1/file/delete"
            body: "*"
        };
	}
    rpc RenameFile(RenameFileRequest) returns (RenameFileResponse) {
		option (google.api.http) = {
            post: "/files/api/v1/file/rename"
            body: "*"
        };
	}
    rpc MoveFile(MoveFileRequest) returns (MoveFileResponse) {
		option (google.api.http) = {
            post: "/files/api/v1/file/move"
            body: "*"
        };
	}
    rpc UploadFile(UploadFileRequest) returns (UploadFileResponse) {
		option (google.api.http) = {
            post: "/files/api/v1/file/upload"
            body: "*"
        };
	} 
	rpc ShareFile(ShareFileRequest) returns (ShareFileResponse) {
		option (google.api.http) = {
            post: "/files/api/v1/file/share"
            body: "*"
        };
	} 
    rpc DownloadFile(DownloadFileRequest) returns (DownloadFileResponse) {
		option (google.api.http) = {
            post: "/files/api/v1/file/download"
            body: "*"
        };
	} 
		// TODO add methods for shared files
}
enum Type {
    OTHER = 0;
    DOC = 1;
    PDF = 2;
    TXT = 3;
    EXCEL = 4;
    IMAGE = 5;
}
message Folder {
    string parent_identifier = 1;
    string name = 2;
    string identifier = 3;
    string creation_date = 4;
}
message FSLevel {
    Folder folder = 1;
    repeated Folder folders = 2;
    repeated File files = 3;
}
message FSTree {
    Folder folder = 1;
    repeated FSLevel children = 2;
    repeated File files = 3;
}
message File {
    string parent_identifier = 1;
    string name = 2;
    string identifier = 3;
    string creation_date = 4;
    Type file_type = 6;
    bool writable = 7;
    bool private = 8; // should be watermarked 
    bytes content = 9;
}
message CreateDriveRequest {
    string user_id = 1;
}
message CreateDriveResponse {
    string response_code = 1;
	string response_message = 2;
	string drive_id = 3;
}
message UploadFileRequest {
    File file = 1;
    string user_id = 4;
	bytes secret_phrase = 2;
	bytes encoded_phrase = 3;
}
message UploadFileResponse {
    string response_code = 1;
	string response_message = 2;
	string file_id = 3;
    bytes watermark_message = 4;
}
message CreateNewFileRequest {
    File file = 1;
    bytes secret_phrase = 2;
    string user_id = 3;
}
message CreateNewFileResponse {
    string response_code = 1;
	string response_message = 2;
	string file_id = 3;
}
message CreateNewFolderRequest {
    Folder folder = 1;
    string user_id = 2;
}
message CreateNewFolderResponse {
    string response_code = 1;
	string response_message = 2;
	string folder_id = 3;
}
message DeleteFileRequest {
    string identifier = 1;
    string user_id = 2;
}
message DeleteFileResponse {
    string response_code = 1;
    string response_message = 2;
}
message RenameFileRequest {
    string identifier = 1;
    string name = 2;
    string user_id = 3;
}
message RenameFileResponse {
    string response_code = 1;
    string response_message = 2;
}
message MoveFileRequest {
    string identifier = 1;
    string destination = 2;
    string source = 3;
    string user_id = 4;
    bool copy = 5;
}
message MoveFileResponse {
    string response_code = 1;
    string response_message = 2;
}
message GetFolderContentRequest {
    string identifier = 1;
    string user_id = 2;
}
message GetFolderContentResponse {
    string response_code = 1;
    string response_message = 2;
    FSLevel content = 3;
}
message GetFileContentRequest {
    string identifier = 1;
    string user_id = 2;
    bytes secret_key = 3;
    Type type = 4;
}
message GetFileContentResponse {
    string response_code = 1;
    string response_message = 2;
    File file = 3;
}
message GetFileTreeRequest {
    string root_identifier = 1;
    string user_id = 2;
}
message GetFileTreeResponse {
    string response_code = 1;
    string response_message = 2;
    FSTree tree = 3;
}
message UpdateFileContentRequest {
    string identifier = 1;
    bytes new_content = 2;
    string user_id = 3;
    Type file_type = 4;
    bytes secret_key = 5;
}
message UpdateFileContentResponse {
    string response_code = 1;
    string response_message = 2;
}
message ShareFileRequest {
    string identifier = 1;
    repeated string user_identifiers = 2;
}
message ShareFileResponse {
    string response_code = 1;
    string response_message = 2;
}
message DownloadFileRequest {
    string identifier = 1;
    string user_id = 2;
    string source_id = 3;
    bytes secret_phrase = 4;
    bytes watermark_image = 5;
    string watermark_message = 6;
    bytes stegano_message =7;
}
message DownloadFileResponse {
    string response_code = 1;
    string response_message = 2;
    File file = 3;
    bytes content = 4;
}

