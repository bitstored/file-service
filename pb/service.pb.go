// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	GetMyDriveIdRequest
	GetMyDriveIdResponse
	ComputeSizeRequest
	ComputeSizeResponse
	Folder
	FSLevel
	FSTree
	File
	CreateDriveRequest
	CreateDriveResponse
	UploadFileRequest
	UploadFileResponse
	CreateNewFileRequest
	CreateNewFileResponse
	CreateNewFolderRequest
	CreateNewFolderResponse
	DeleteFileRequest
	DeleteFileResponse
	RenameFileRequest
	RenameFileResponse
	MoveFileRequest
	MoveFileResponse
	GetFolderContentRequest
	GetFolderContentResponse
	GetFileContentRequest
	GetFileContentResponse
	GetFileTreeRequest
	GetFileTreeResponse
	UpdateFileContentRequest
	UpdateFileContentResponse
	ShareFileRequest
	ShareFileResponse
	DownloadFileRequest
	DownloadFileResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_OTHER Type = 0
	Type_DOC   Type = 1
	Type_PDF   Type = 2
	Type_TXT   Type = 3
	Type_EXCEL Type = 4
	Type_IMAGE Type = 5
)

var Type_name = map[int32]string{
	0: "OTHER",
	1: "DOC",
	2: "PDF",
	3: "TXT",
	4: "EXCEL",
	5: "IMAGE",
}
var Type_value = map[string]int32{
	"OTHER": 0,
	"DOC":   1,
	"PDF":   2,
	"TXT":   3,
	"EXCEL": 4,
	"IMAGE": 5,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetMyDriveIdRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetMyDriveIdRequest) Reset()                    { *m = GetMyDriveIdRequest{} }
func (m *GetMyDriveIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMyDriveIdRequest) ProtoMessage()               {}
func (*GetMyDriveIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetMyDriveIdRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetMyDriveIdResponse struct {
	DriveId string `protobuf:"bytes,1,opt,name=drive_id,json=driveId" json:"drive_id,omitempty"`
}

func (m *GetMyDriveIdResponse) Reset()                    { *m = GetMyDriveIdResponse{} }
func (m *GetMyDriveIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMyDriveIdResponse) ProtoMessage()               {}
func (*GetMyDriveIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetMyDriveIdResponse) GetDriveId() string {
	if m != nil {
		return m.DriveId
	}
	return ""
}

type ComputeSizeRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ComputeSizeRequest) Reset()                    { *m = ComputeSizeRequest{} }
func (m *ComputeSizeRequest) String() string            { return proto.CompactTextString(m) }
func (*ComputeSizeRequest) ProtoMessage()               {}
func (*ComputeSizeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ComputeSizeRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ComputeSizeResponse struct {
	InitialSize    int64 `protobuf:"varint,1,opt,name=initial_size,json=initialSize" json:"initial_size,omitempty"`
	CompressedSize int64 `protobuf:"varint,2,opt,name=compressed_size,json=compressedSize" json:"compressed_size,omitempty"`
}

func (m *ComputeSizeResponse) Reset()                    { *m = ComputeSizeResponse{} }
func (m *ComputeSizeResponse) String() string            { return proto.CompactTextString(m) }
func (*ComputeSizeResponse) ProtoMessage()               {}
func (*ComputeSizeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ComputeSizeResponse) GetInitialSize() int64 {
	if m != nil {
		return m.InitialSize
	}
	return 0
}

func (m *ComputeSizeResponse) GetCompressedSize() int64 {
	if m != nil {
		return m.CompressedSize
	}
	return 0
}

type Folder struct {
	ParentIdentifier string `protobuf:"bytes,1,opt,name=parent_identifier,json=parentIdentifier" json:"parent_identifier,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Identifier       string `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
	CreationDate     string `protobuf:"bytes,4,opt,name=creation_date,json=creationDate" json:"creation_date,omitempty"`
}

func (m *Folder) Reset()                    { *m = Folder{} }
func (m *Folder) String() string            { return proto.CompactTextString(m) }
func (*Folder) ProtoMessage()               {}
func (*Folder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Folder) GetParentIdentifier() string {
	if m != nil {
		return m.ParentIdentifier
	}
	return ""
}

func (m *Folder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Folder) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Folder) GetCreationDate() string {
	if m != nil {
		return m.CreationDate
	}
	return ""
}

type FSLevel struct {
	Folder  *Folder   `protobuf:"bytes,1,opt,name=folder" json:"folder,omitempty"`
	Folders []*Folder `protobuf:"bytes,2,rep,name=folders" json:"folders,omitempty"`
	Files   []*File   `protobuf:"bytes,3,rep,name=files" json:"files,omitempty"`
}

func (m *FSLevel) Reset()                    { *m = FSLevel{} }
func (m *FSLevel) String() string            { return proto.CompactTextString(m) }
func (*FSLevel) ProtoMessage()               {}
func (*FSLevel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FSLevel) GetFolder() *Folder {
	if m != nil {
		return m.Folder
	}
	return nil
}

func (m *FSLevel) GetFolders() []*Folder {
	if m != nil {
		return m.Folders
	}
	return nil
}

func (m *FSLevel) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type FSTree struct {
	Folder   *Folder    `protobuf:"bytes,1,opt,name=folder" json:"folder,omitempty"`
	Children []*FSLevel `protobuf:"bytes,2,rep,name=children" json:"children,omitempty"`
	Files    []*File    `protobuf:"bytes,3,rep,name=files" json:"files,omitempty"`
}

func (m *FSTree) Reset()                    { *m = FSTree{} }
func (m *FSTree) String() string            { return proto.CompactTextString(m) }
func (*FSTree) ProtoMessage()               {}
func (*FSTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FSTree) GetFolder() *Folder {
	if m != nil {
		return m.Folder
	}
	return nil
}

func (m *FSTree) GetChildren() []*FSLevel {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *FSTree) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type File struct {
	ParentIdentifier string `protobuf:"bytes,1,opt,name=parent_identifier,json=parentIdentifier" json:"parent_identifier,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Identifier       string `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
	CreationDate     string `protobuf:"bytes,4,opt,name=creation_date,json=creationDate" json:"creation_date,omitempty"`
	FileType         Type   `protobuf:"varint,6,opt,name=file_type,json=fileType,enum=file_service.Type" json:"file_type,omitempty"`
	Writable         bool   `protobuf:"varint,7,opt,name=writable" json:"writable,omitempty"`
	Private          bool   `protobuf:"varint,8,opt,name=private" json:"private,omitempty"`
	Content          []byte `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty"`
	InitSize         int64  `protobuf:"varint,10,opt,name=init_size,json=initSize" json:"init_size,omitempty"`
	CompressedSize   int64  `protobuf:"varint,11,opt,name=compressed_size,json=compressedSize" json:"compressed_size,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *File) GetParentIdentifier() string {
	if m != nil {
		return m.ParentIdentifier
	}
	return ""
}

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *File) GetCreationDate() string {
	if m != nil {
		return m.CreationDate
	}
	return ""
}

func (m *File) GetFileType() Type {
	if m != nil {
		return m.FileType
	}
	return Type_OTHER
}

func (m *File) GetWritable() bool {
	if m != nil {
		return m.Writable
	}
	return false
}

func (m *File) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *File) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *File) GetInitSize() int64 {
	if m != nil {
		return m.InitSize
	}
	return 0
}

func (m *File) GetCompressedSize() int64 {
	if m != nil {
		return m.CompressedSize
	}
	return 0
}

type CreateDriveRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *CreateDriveRequest) Reset()                    { *m = CreateDriveRequest{} }
func (m *CreateDriveRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDriveRequest) ProtoMessage()               {}
func (*CreateDriveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateDriveRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type CreateDriveResponse struct {
	ResponseCode    string `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	DriveId         string `protobuf:"bytes,3,opt,name=drive_id,json=driveId" json:"drive_id,omitempty"`
}

func (m *CreateDriveResponse) Reset()                    { *m = CreateDriveResponse{} }
func (m *CreateDriveResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDriveResponse) ProtoMessage()               {}
func (*CreateDriveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateDriveResponse) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *CreateDriveResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *CreateDriveResponse) GetDriveId() string {
	if m != nil {
		return m.DriveId
	}
	return ""
}

type UploadFileRequest struct {
	File          *File  `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	UserId        string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SecretPhrase  []byte `protobuf:"bytes,2,opt,name=secret_phrase,json=secretPhrase,proto3" json:"secret_phrase,omitempty"`
	EncodedPhrase []byte `protobuf:"bytes,3,opt,name=encoded_phrase,json=encodedPhrase,proto3" json:"encoded_phrase,omitempty"`
}

func (m *UploadFileRequest) Reset()                    { *m = UploadFileRequest{} }
func (m *UploadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadFileRequest) ProtoMessage()               {}
func (*UploadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UploadFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *UploadFileRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UploadFileRequest) GetSecretPhrase() []byte {
	if m != nil {
		return m.SecretPhrase
	}
	return nil
}

func (m *UploadFileRequest) GetEncodedPhrase() []byte {
	if m != nil {
		return m.EncodedPhrase
	}
	return nil
}

type UploadFileResponse struct {
	ResponseCode     string `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage  string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	FileId           string `protobuf:"bytes,3,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	WatermarkMessage []byte `protobuf:"bytes,4,opt,name=watermark_message,json=watermarkMessage,proto3" json:"watermark_message,omitempty"`
}

func (m *UploadFileResponse) Reset()                    { *m = UploadFileResponse{} }
func (m *UploadFileResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadFileResponse) ProtoMessage()               {}
func (*UploadFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UploadFileResponse) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *UploadFileResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *UploadFileResponse) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *UploadFileResponse) GetWatermarkMessage() []byte {
	if m != nil {
		return m.WatermarkMessage
	}
	return nil
}

type CreateNewFileRequest struct {
	File         *File  `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	SecretPhrase []byte `protobuf:"bytes,2,opt,name=secret_phrase,json=secretPhrase,proto3" json:"secret_phrase,omitempty"`
	UserId       string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *CreateNewFileRequest) Reset()                    { *m = CreateNewFileRequest{} }
func (m *CreateNewFileRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNewFileRequest) ProtoMessage()               {}
func (*CreateNewFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateNewFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *CreateNewFileRequest) GetSecretPhrase() []byte {
	if m != nil {
		return m.SecretPhrase
	}
	return nil
}

func (m *CreateNewFileRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type CreateNewFileResponse struct {
	ResponseCode    string `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	FileId          string `protobuf:"bytes,3,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
}

func (m *CreateNewFileResponse) Reset()                    { *m = CreateNewFileResponse{} }
func (m *CreateNewFileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateNewFileResponse) ProtoMessage()               {}
func (*CreateNewFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateNewFileResponse) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *CreateNewFileResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *CreateNewFileResponse) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

type CreateNewFolderRequest struct {
	Folder *Folder `protobuf:"bytes,1,opt,name=folder" json:"folder,omitempty"`
	UserId string  `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *CreateNewFolderRequest) Reset()                    { *m = CreateNewFolderRequest{} }
func (m *CreateNewFolderRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNewFolderRequest) ProtoMessage()               {}
func (*CreateNewFolderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CreateNewFolderRequest) GetFolder() *Folder {
	if m != nil {
		return m.Folder
	}
	return nil
}

func (m *CreateNewFolderRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type CreateNewFolderResponse struct {
	ResponseCode    string `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	FolderId        string `protobuf:"bytes,3,opt,name=folder_id,json=folderId" json:"folder_id,omitempty"`
}

func (m *CreateNewFolderResponse) Reset()                    { *m = CreateNewFolderResponse{} }
func (m *CreateNewFolderResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateNewFolderResponse) ProtoMessage()               {}
func (*CreateNewFolderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CreateNewFolderResponse) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *CreateNewFolderResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *CreateNewFolderResponse) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

type DeleteFileRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *DeleteFileRequest) Reset()                    { *m = DeleteFileRequest{} }
func (m *DeleteFileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFileRequest) ProtoMessage()               {}
func (*DeleteFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DeleteFileRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *DeleteFileRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type DeleteFileResponse struct {
	ResponseCode    string `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
}

func (m *DeleteFileResponse) Reset()                    { *m = DeleteFileResponse{} }
func (m *DeleteFileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteFileResponse) ProtoMessage()               {}
func (*DeleteFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DeleteFileResponse) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *DeleteFileResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

type RenameFileRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	UserId     string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *RenameFileRequest) Reset()                    { *m = RenameFileRequest{} }
func (m *RenameFileRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameFileRequest) ProtoMessage()               {}
func (*RenameFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *RenameFileRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *RenameFileRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RenameFileRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type RenameFileResponse struct {
	ResponseCode    string `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
}

func (m *RenameFileResponse) Reset()                    { *m = RenameFileResponse{} }
func (m *RenameFileResponse) String() string            { return proto.CompactTextString(m) }
func (*RenameFileResponse) ProtoMessage()               {}
func (*RenameFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *RenameFileResponse) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *RenameFileResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

type MoveFileRequest struct {
	Identifier  string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
	Source      string `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	UserId      string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Copy        bool   `protobuf:"varint,5,opt,name=copy" json:"copy,omitempty"`
}

func (m *MoveFileRequest) Reset()                    { *m = MoveFileRequest{} }
func (m *MoveFileRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveFileRequest) ProtoMessage()               {}
func (*MoveFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *MoveFileRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *MoveFileRequest) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *MoveFileRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *MoveFileRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *MoveFileRequest) GetCopy() bool {
	if m != nil {
		return m.Copy
	}
	return false
}

type MoveFileResponse struct {
	ResponseCode    string `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
}

func (m *MoveFileResponse) Reset()                    { *m = MoveFileResponse{} }
func (m *MoveFileResponse) String() string            { return proto.CompactTextString(m) }
func (*MoveFileResponse) ProtoMessage()               {}
func (*MoveFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *MoveFileResponse) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *MoveFileResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

type GetFolderContentRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetFolderContentRequest) Reset()                    { *m = GetFolderContentRequest{} }
func (m *GetFolderContentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFolderContentRequest) ProtoMessage()               {}
func (*GetFolderContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetFolderContentRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *GetFolderContentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetFolderContentResponse struct {
	ResponseCode    string   `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string   `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	Content         *FSLevel `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
}

func (m *GetFolderContentResponse) Reset()                    { *m = GetFolderContentResponse{} }
func (m *GetFolderContentResponse) String() string            { return proto.CompactTextString(m) }
func (*GetFolderContentResponse) ProtoMessage()               {}
func (*GetFolderContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetFolderContentResponse) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *GetFolderContentResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *GetFolderContentResponse) GetContent() *FSLevel {
	if m != nil {
		return m.Content
	}
	return nil
}

type GetFileContentRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SecretKey  []byte `protobuf:"bytes,3,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Type       Type   `protobuf:"varint,4,opt,name=type,enum=file_service.Type" json:"type,omitempty"`
}

func (m *GetFileContentRequest) Reset()                    { *m = GetFileContentRequest{} }
func (m *GetFileContentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFileContentRequest) ProtoMessage()               {}
func (*GetFileContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetFileContentRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *GetFileContentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetFileContentRequest) GetSecretKey() []byte {
	if m != nil {
		return m.SecretKey
	}
	return nil
}

func (m *GetFileContentRequest) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_OTHER
}

type GetFileContentResponse struct {
	ResponseCode    string `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	File            *File  `protobuf:"bytes,3,opt,name=file" json:"file,omitempty"`
}

func (m *GetFileContentResponse) Reset()                    { *m = GetFileContentResponse{} }
func (m *GetFileContentResponse) String() string            { return proto.CompactTextString(m) }
func (*GetFileContentResponse) ProtoMessage()               {}
func (*GetFileContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetFileContentResponse) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *GetFileContentResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *GetFileContentResponse) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type GetFileTreeRequest struct {
	RootIdentifier string `protobuf:"bytes,1,opt,name=root_identifier,json=rootIdentifier" json:"root_identifier,omitempty"`
	UserId         string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetFileTreeRequest) Reset()                    { *m = GetFileTreeRequest{} }
func (m *GetFileTreeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFileTreeRequest) ProtoMessage()               {}
func (*GetFileTreeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetFileTreeRequest) GetRootIdentifier() string {
	if m != nil {
		return m.RootIdentifier
	}
	return ""
}

func (m *GetFileTreeRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetFileTreeResponse struct {
	ResponseCode    string  `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string  `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	Tree            *FSTree `protobuf:"bytes,3,opt,name=tree" json:"tree,omitempty"`
}

func (m *GetFileTreeResponse) Reset()                    { *m = GetFileTreeResponse{} }
func (m *GetFileTreeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetFileTreeResponse) ProtoMessage()               {}
func (*GetFileTreeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetFileTreeResponse) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *GetFileTreeResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *GetFileTreeResponse) GetTree() *FSTree {
	if m != nil {
		return m.Tree
	}
	return nil
}

type UpdateFileContentRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	NewContent []byte `protobuf:"bytes,2,opt,name=new_content,json=newContent,proto3" json:"new_content,omitempty"`
	UserId     string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	FileType   Type   `protobuf:"varint,4,opt,name=file_type,json=fileType,enum=file_service.Type" json:"file_type,omitempty"`
	SecretKey  []byte `protobuf:"bytes,5,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (m *UpdateFileContentRequest) Reset()                    { *m = UpdateFileContentRequest{} }
func (m *UpdateFileContentRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateFileContentRequest) ProtoMessage()               {}
func (*UpdateFileContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *UpdateFileContentRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *UpdateFileContentRequest) GetNewContent() []byte {
	if m != nil {
		return m.NewContent
	}
	return nil
}

func (m *UpdateFileContentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateFileContentRequest) GetFileType() Type {
	if m != nil {
		return m.FileType
	}
	return Type_OTHER
}

func (m *UpdateFileContentRequest) GetSecretKey() []byte {
	if m != nil {
		return m.SecretKey
	}
	return nil
}

type UpdateFileContentResponse struct {
	ResponseCode    string `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
}

func (m *UpdateFileContentResponse) Reset()                    { *m = UpdateFileContentResponse{} }
func (m *UpdateFileContentResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateFileContentResponse) ProtoMessage()               {}
func (*UpdateFileContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *UpdateFileContentResponse) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *UpdateFileContentResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

type ShareFileRequest struct {
	Identifier      string   `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	UserIdentifiers []string `protobuf:"bytes,2,rep,name=user_identifiers,json=userIdentifiers" json:"user_identifiers,omitempty"`
}

func (m *ShareFileRequest) Reset()                    { *m = ShareFileRequest{} }
func (m *ShareFileRequest) String() string            { return proto.CompactTextString(m) }
func (*ShareFileRequest) ProtoMessage()               {}
func (*ShareFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ShareFileRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *ShareFileRequest) GetUserIdentifiers() []string {
	if m != nil {
		return m.UserIdentifiers
	}
	return nil
}

type ShareFileResponse struct {
	ResponseCode    string `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
}

func (m *ShareFileResponse) Reset()                    { *m = ShareFileResponse{} }
func (m *ShareFileResponse) String() string            { return proto.CompactTextString(m) }
func (*ShareFileResponse) ProtoMessage()               {}
func (*ShareFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ShareFileResponse) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *ShareFileResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

type DownloadFileRequest struct {
	Identifier       string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	UserId           string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SourceId         string `protobuf:"bytes,3,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	SecretPhrase     []byte `protobuf:"bytes,4,opt,name=secret_phrase,json=secretPhrase,proto3" json:"secret_phrase,omitempty"`
	WatermarkImage   []byte `protobuf:"bytes,5,opt,name=watermark_image,json=watermarkImage,proto3" json:"watermark_image,omitempty"`
	WatermarkMessage string `protobuf:"bytes,6,opt,name=watermark_message,json=watermarkMessage" json:"watermark_message,omitempty"`
	SteganoMessage   []byte `protobuf:"bytes,7,opt,name=stegano_message,json=steganoMessage,proto3" json:"stegano_message,omitempty"`
}

func (m *DownloadFileRequest) Reset()                    { *m = DownloadFileRequest{} }
func (m *DownloadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadFileRequest) ProtoMessage()               {}
func (*DownloadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *DownloadFileRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *DownloadFileRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DownloadFileRequest) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *DownloadFileRequest) GetSecretPhrase() []byte {
	if m != nil {
		return m.SecretPhrase
	}
	return nil
}

func (m *DownloadFileRequest) GetWatermarkImage() []byte {
	if m != nil {
		return m.WatermarkImage
	}
	return nil
}

func (m *DownloadFileRequest) GetWatermarkMessage() string {
	if m != nil {
		return m.WatermarkMessage
	}
	return ""
}

func (m *DownloadFileRequest) GetSteganoMessage() []byte {
	if m != nil {
		return m.SteganoMessage
	}
	return nil
}

type DownloadFileResponse struct {
	ResponseCode    string `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	File            *File  `protobuf:"bytes,3,opt,name=file" json:"file,omitempty"`
	Content         []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *DownloadFileResponse) Reset()                    { *m = DownloadFileResponse{} }
func (m *DownloadFileResponse) String() string            { return proto.CompactTextString(m) }
func (*DownloadFileResponse) ProtoMessage()               {}
func (*DownloadFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *DownloadFileResponse) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *DownloadFileResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *DownloadFileResponse) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *DownloadFileResponse) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*GetMyDriveIdRequest)(nil), "file_service.GetMyDriveIdRequest")
	proto.RegisterType((*GetMyDriveIdResponse)(nil), "file_service.GetMyDriveIdResponse")
	proto.RegisterType((*ComputeSizeRequest)(nil), "file_service.ComputeSizeRequest")
	proto.RegisterType((*ComputeSizeResponse)(nil), "file_service.ComputeSizeResponse")
	proto.RegisterType((*Folder)(nil), "file_service.Folder")
	proto.RegisterType((*FSLevel)(nil), "file_service.FSLevel")
	proto.RegisterType((*FSTree)(nil), "file_service.FSTree")
	proto.RegisterType((*File)(nil), "file_service.File")
	proto.RegisterType((*CreateDriveRequest)(nil), "file_service.CreateDriveRequest")
	proto.RegisterType((*CreateDriveResponse)(nil), "file_service.CreateDriveResponse")
	proto.RegisterType((*UploadFileRequest)(nil), "file_service.UploadFileRequest")
	proto.RegisterType((*UploadFileResponse)(nil), "file_service.UploadFileResponse")
	proto.RegisterType((*CreateNewFileRequest)(nil), "file_service.CreateNewFileRequest")
	proto.RegisterType((*CreateNewFileResponse)(nil), "file_service.CreateNewFileResponse")
	proto.RegisterType((*CreateNewFolderRequest)(nil), "file_service.CreateNewFolderRequest")
	proto.RegisterType((*CreateNewFolderResponse)(nil), "file_service.CreateNewFolderResponse")
	proto.RegisterType((*DeleteFileRequest)(nil), "file_service.DeleteFileRequest")
	proto.RegisterType((*DeleteFileResponse)(nil), "file_service.DeleteFileResponse")
	proto.RegisterType((*RenameFileRequest)(nil), "file_service.RenameFileRequest")
	proto.RegisterType((*RenameFileResponse)(nil), "file_service.RenameFileResponse")
	proto.RegisterType((*MoveFileRequest)(nil), "file_service.MoveFileRequest")
	proto.RegisterType((*MoveFileResponse)(nil), "file_service.MoveFileResponse")
	proto.RegisterType((*GetFolderContentRequest)(nil), "file_service.GetFolderContentRequest")
	proto.RegisterType((*GetFolderContentResponse)(nil), "file_service.GetFolderContentResponse")
	proto.RegisterType((*GetFileContentRequest)(nil), "file_service.GetFileContentRequest")
	proto.RegisterType((*GetFileContentResponse)(nil), "file_service.GetFileContentResponse")
	proto.RegisterType((*GetFileTreeRequest)(nil), "file_service.GetFileTreeRequest")
	proto.RegisterType((*GetFileTreeResponse)(nil), "file_service.GetFileTreeResponse")
	proto.RegisterType((*UpdateFileContentRequest)(nil), "file_service.UpdateFileContentRequest")
	proto.RegisterType((*UpdateFileContentResponse)(nil), "file_service.UpdateFileContentResponse")
	proto.RegisterType((*ShareFileRequest)(nil), "file_service.ShareFileRequest")
	proto.RegisterType((*ShareFileResponse)(nil), "file_service.ShareFileResponse")
	proto.RegisterType((*DownloadFileRequest)(nil), "file_service.DownloadFileRequest")
	proto.RegisterType((*DownloadFileResponse)(nil), "file_service.DownloadFileResponse")
	proto.RegisterEnum("file_service.Type", Type_name, Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FileManagement service

type FileManagementClient interface {
	CreateDrive(ctx context.Context, in *CreateDriveRequest, opts ...grpc.CallOption) (*CreateDriveResponse, error)
	CreateNewFile(ctx context.Context, in *CreateNewFileRequest, opts ...grpc.CallOption) (*CreateNewFileResponse, error)
	CreateNewFolder(ctx context.Context, in *CreateNewFolderRequest, opts ...grpc.CallOption) (*CreateNewFolderResponse, error)
	GetFolderContent(ctx context.Context, in *GetFolderContentRequest, opts ...grpc.CallOption) (*GetFolderContentResponse, error)
	GetFileContent(ctx context.Context, in *GetFileContentRequest, opts ...grpc.CallOption) (*GetFileContentResponse, error)
	GetFileTree(ctx context.Context, in *GetFileTreeRequest, opts ...grpc.CallOption) (*GetFileTreeResponse, error)
	UpdateFileContent(ctx context.Context, in *UpdateFileContentRequest, opts ...grpc.CallOption) (*UpdateFileContentResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error)
	MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*MoveFileResponse, error)
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	ShareFile(ctx context.Context, in *ShareFileRequest, opts ...grpc.CallOption) (*ShareFileResponse, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error)
	ComputeSize(ctx context.Context, in *ComputeSizeRequest, opts ...grpc.CallOption) (*ComputeSizeResponse, error)
	GetMyDriveId(ctx context.Context, in *GetMyDriveIdRequest, opts ...grpc.CallOption) (*GetMyDriveIdResponse, error)
}

type fileManagementClient struct {
	cc *grpc.ClientConn
}

func NewFileManagementClient(cc *grpc.ClientConn) FileManagementClient {
	return &fileManagementClient{cc}
}

func (c *fileManagementClient) CreateDrive(ctx context.Context, in *CreateDriveRequest, opts ...grpc.CallOption) (*CreateDriveResponse, error) {
	out := new(CreateDriveResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/CreateDrive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) CreateNewFile(ctx context.Context, in *CreateNewFileRequest, opts ...grpc.CallOption) (*CreateNewFileResponse, error) {
	out := new(CreateNewFileResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/CreateNewFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) CreateNewFolder(ctx context.Context, in *CreateNewFolderRequest, opts ...grpc.CallOption) (*CreateNewFolderResponse, error) {
	out := new(CreateNewFolderResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/CreateNewFolder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) GetFolderContent(ctx context.Context, in *GetFolderContentRequest, opts ...grpc.CallOption) (*GetFolderContentResponse, error) {
	out := new(GetFolderContentResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/GetFolderContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) GetFileContent(ctx context.Context, in *GetFileContentRequest, opts ...grpc.CallOption) (*GetFileContentResponse, error) {
	out := new(GetFileContentResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/GetFileContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) GetFileTree(ctx context.Context, in *GetFileTreeRequest, opts ...grpc.CallOption) (*GetFileTreeResponse, error) {
	out := new(GetFileTreeResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/GetFileTree", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) UpdateFileContent(ctx context.Context, in *UpdateFileContentRequest, opts ...grpc.CallOption) (*UpdateFileContentResponse, error) {
	out := new(UpdateFileContentResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/UpdateFileContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error) {
	out := new(RenameFileResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/RenameFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*MoveFileResponse, error) {
	out := new(MoveFileResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/MoveFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/UploadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) ShareFile(ctx context.Context, in *ShareFileRequest, opts ...grpc.CallOption) (*ShareFileResponse, error) {
	out := new(ShareFileResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/ShareFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	out := new(DownloadFileResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/DownloadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) ComputeSize(ctx context.Context, in *ComputeSizeRequest, opts ...grpc.CallOption) (*ComputeSizeResponse, error) {
	out := new(ComputeSizeResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/ComputeSize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) GetMyDriveId(ctx context.Context, in *GetMyDriveIdRequest, opts ...grpc.CallOption) (*GetMyDriveIdResponse, error) {
	out := new(GetMyDriveIdResponse)
	err := grpc.Invoke(ctx, "/file_service.FileManagement/GetMyDriveId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileManagement service

type FileManagementServer interface {
	CreateDrive(context.Context, *CreateDriveRequest) (*CreateDriveResponse, error)
	CreateNewFile(context.Context, *CreateNewFileRequest) (*CreateNewFileResponse, error)
	CreateNewFolder(context.Context, *CreateNewFolderRequest) (*CreateNewFolderResponse, error)
	GetFolderContent(context.Context, *GetFolderContentRequest) (*GetFolderContentResponse, error)
	GetFileContent(context.Context, *GetFileContentRequest) (*GetFileContentResponse, error)
	GetFileTree(context.Context, *GetFileTreeRequest) (*GetFileTreeResponse, error)
	UpdateFileContent(context.Context, *UpdateFileContentRequest) (*UpdateFileContentResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	RenameFile(context.Context, *RenameFileRequest) (*RenameFileResponse, error)
	MoveFile(context.Context, *MoveFileRequest) (*MoveFileResponse, error)
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	ShareFile(context.Context, *ShareFileRequest) (*ShareFileResponse, error)
	DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error)
	ComputeSize(context.Context, *ComputeSizeRequest) (*ComputeSizeResponse, error)
	GetMyDriveId(context.Context, *GetMyDriveIdRequest) (*GetMyDriveIdResponse, error)
}

func RegisterFileManagementServer(s *grpc.Server, srv FileManagementServer) {
	s.RegisterService(&_FileManagement_serviceDesc, srv)
}

func _FileManagement_CreateDrive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDriveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).CreateDrive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/CreateDrive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).CreateDrive(ctx, req.(*CreateDriveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_CreateNewFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).CreateNewFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/CreateNewFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).CreateNewFile(ctx, req.(*CreateNewFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_CreateNewFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).CreateNewFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/CreateNewFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).CreateNewFolder(ctx, req.(*CreateNewFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_GetFolderContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolderContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).GetFolderContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/GetFolderContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).GetFolderContent(ctx, req.(*GetFolderContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_GetFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).GetFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/GetFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).GetFileContent(ctx, req.(*GetFileContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_GetFileTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).GetFileTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/GetFileTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).GetFileTree(ctx, req.(*GetFileTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_UpdateFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).UpdateFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/UpdateFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).UpdateFileContent(ctx, req.(*UpdateFileContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/RenameFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).RenameFile(ctx, req.(*RenameFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/MoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).MoveFile(ctx, req.(*MoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_ShareFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).ShareFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/ShareFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).ShareFile(ctx, req.(*ShareFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).DownloadFile(ctx, req.(*DownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_ComputeSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).ComputeSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/ComputeSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).ComputeSize(ctx, req.(*ComputeSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_GetMyDriveId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyDriveIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).GetMyDriveId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_service.FileManagement/GetMyDriveId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).GetMyDriveId(ctx, req.(*GetMyDriveIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "file_service.FileManagement",
	HandlerType: (*FileManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDrive",
			Handler:    _FileManagement_CreateDrive_Handler,
		},
		{
			MethodName: "CreateNewFile",
			Handler:    _FileManagement_CreateNewFile_Handler,
		},
		{
			MethodName: "CreateNewFolder",
			Handler:    _FileManagement_CreateNewFolder_Handler,
		},
		{
			MethodName: "GetFolderContent",
			Handler:    _FileManagement_GetFolderContent_Handler,
		},
		{
			MethodName: "GetFileContent",
			Handler:    _FileManagement_GetFileContent_Handler,
		},
		{
			MethodName: "GetFileTree",
			Handler:    _FileManagement_GetFileTree_Handler,
		},
		{
			MethodName: "UpdateFileContent",
			Handler:    _FileManagement_UpdateFileContent_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileManagement_DeleteFile_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _FileManagement_RenameFile_Handler,
		},
		{
			MethodName: "MoveFile",
			Handler:    _FileManagement_MoveFile_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _FileManagement_UploadFile_Handler,
		},
		{
			MethodName: "ShareFile",
			Handler:    _FileManagement_ShareFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _FileManagement_DownloadFile_Handler,
		},
		{
			MethodName: "ComputeSize",
			Handler:    _FileManagement_ComputeSize_Handler,
		},
		{
			MethodName: "GetMyDriveId",
			Handler:    _FileManagement_GetMyDriveId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x4b, 0x73, 0xdb, 0xd4,
	0x17, 0xff, 0xcb, 0x56, 0xfc, 0x38, 0x76, 0x1c, 0xe7, 0x26, 0x4d, 0x1c, 0xa5, 0x6d, 0xdc, 0x9b,
	0xb6, 0x49, 0xfb, 0x87, 0x64, 0x5a, 0x76, 0xec, 0x68, 0x92, 0x16, 0x0f, 0x0d, 0xed, 0x28, 0x29,
	0xd3, 0x61, 0x86, 0x31, 0x8a, 0x75, 0x9a, 0x6a, 0x6a, 0x4b, 0xae, 0xa4, 0x24, 0xa4, 0xc3, 0x6b,
	0x58, 0x94, 0x19, 0x16, 0x14, 0xa6, 0x0b, 0x98, 0x61, 0xc3, 0x92, 0xe1, 0x73, 0xf0, 0x0d, 0xba,
	0xe0, 0x0b, 0xf0, 0x41, 0x98, 0xfb, 0x90, 0xad, 0x67, 0x9c, 0x14, 0x0c, 0xec, 0x74, 0xcf, 0xfd,
	0xe9, 0xbc, 0xee, 0xb9, 0xe7, 0x21, 0xc1, 0xa4, 0x87, 0xee, 0xa1, 0xd5, 0xc1, 0xb5, 0xbe, 0xeb,
	0xf8, 0x0e, 0xa9, 0x3e, 0xb2, 0xba, 0xd8, 0x96, 0x34, 0xed, 0xfc, 0xbe, 0xe3, 0xec, 0x77, 0x71,
	0xdd, 0xe8, 0x5b, 0xeb, 0x86, 0x6d, 0x3b, 0xbe, 0xe1, 0x5b, 0x8e, 0xed, 0x09, 0x2c, 0x5d, 0x83,
	0x99, 0x3b, 0xe8, 0x6f, 0x1f, 0x6f, 0xba, 0xd6, 0x21, 0xb6, 0x4c, 0x1d, 0x9f, 0x1e, 0xa0, 0xe7,
	0x93, 0x79, 0x28, 0x1e, 0x78, 0xe8, 0xb6, 0x2d, 0xb3, 0xa1, 0x34, 0x95, 0xd5, 0xb2, 0x5e, 0x60,
	0xcb, 0x96, 0x49, 0x6f, 0xc0, 0x6c, 0x14, 0xef, 0xf5, 0x1d, 0xdb, 0x43, 0xb2, 0x00, 0x25, 0x93,
	0x91, 0x86, 0x6f, 0x14, 0x4d, 0x01, 0xa1, 0x6f, 0x02, 0xd9, 0x70, 0x7a, 0xfd, 0x03, 0x1f, 0x77,
	0xac, 0x67, 0x38, 0x52, 0x82, 0x01, 0x33, 0x11, 0xb8, 0x14, 0x70, 0x09, 0xaa, 0x96, 0x6d, 0xf9,
	0x96, 0xd1, 0x6d, 0x7b, 0xd6, 0x33, 0xe4, 0x2f, 0xe5, 0xf5, 0x8a, 0xa4, 0x31, 0x28, 0x59, 0x81,
	0xa9, 0x8e, 0xd3, 0xeb, 0xbb, 0xe8, 0x79, 0x68, 0x0a, 0x54, 0x8e, 0xa3, 0x6a, 0x43, 0x32, 0x03,
	0xd2, 0x6f, 0x15, 0x28, 0xdc, 0x76, 0xba, 0x26, 0xba, 0xe4, 0xff, 0x30, 0xdd, 0x37, 0x5c, 0xb4,
	0xfd, 0xb6, 0x65, 0xa2, 0xed, 0x5b, 0x8f, 0x2c, 0x74, 0xa5, 0x42, 0x75, 0xb1, 0xd1, 0x1a, 0xd0,
	0x09, 0x01, 0xd5, 0x36, 0x7a, 0x82, 0x6b, 0x59, 0xe7, 0xcf, 0xe4, 0x22, 0x40, 0xe8, 0xcd, 0x3c,
	0xdf, 0x09, 0x51, 0xc8, 0x32, 0x4c, 0x76, 0x5c, 0xe4, 0x3e, 0x6f, 0x9b, 0x86, 0x8f, 0x0d, 0x95,
	0x43, 0xaa, 0x01, 0x71, 0xd3, 0xf0, 0x91, 0x7e, 0xaf, 0x40, 0xf1, 0xf6, 0xce, 0x5d, 0x3c, 0xc4,
	0x2e, 0x79, 0x03, 0x0a, 0x8f, 0xb8, 0x6e, 0x5c, 0x8d, 0xca, 0xcd, 0xd9, 0xb5, 0xf0, 0x71, 0xae,
	0x09, 0xbd, 0x75, 0x89, 0x21, 0x6b, 0x50, 0x14, 0x4f, 0x5e, 0x23, 0xd7, 0xcc, 0x67, 0xc2, 0x03,
	0x10, 0x59, 0x85, 0x09, 0xb6, 0xef, 0x35, 0xf2, 0x1c, 0x4d, 0x62, 0x68, 0xab, 0x8b, 0xba, 0x00,
	0xd0, 0x97, 0xcc, 0x49, 0x3b, 0xbb, 0x2e, 0xe2, 0x19, 0x55, 0xba, 0x01, 0xa5, 0xce, 0x63, 0xab,
	0x6b, 0xba, 0x68, 0x4b, 0x9d, 0xce, 0xc5, 0xf0, 0xc2, 0x52, 0x7d, 0x00, 0x3b, 0x83, 0x56, 0xaf,
	0x72, 0xa0, 0xb2, 0xf5, 0x7f, 0xe3, 0xe0, 0xc8, 0x3a, 0x94, 0xb9, 0xaa, 0xfe, 0x71, 0x1f, 0x1b,
	0x85, 0xa6, 0xb2, 0x5a, 0x8b, 0x2b, 0xbf, 0x7b, 0xdc, 0x47, 0xbd, 0xc4, 0x48, 0xec, 0x89, 0x68,
	0x50, 0x3a, 0x72, 0x2d, 0xdf, 0xd8, 0xeb, 0x62, 0xa3, 0xd8, 0x54, 0x56, 0x4b, 0xfa, 0x60, 0x4d,
	0x1a, 0x50, 0xec, 0xbb, 0xd6, 0x21, 0x93, 0x55, 0xe2, 0x5b, 0xc1, 0x92, 0xed, 0x74, 0x1c, 0xdb,
	0x47, 0xdb, 0x6f, 0x94, 0x9b, 0xca, 0x6a, 0x55, 0x0f, 0x96, 0x64, 0x11, 0xca, 0xec, 0x0a, 0x88,
	0x68, 0x07, 0x1e, 0xed, 0x25, 0x46, 0xc8, 0xba, 0x10, 0x95, 0xd4, 0x0b, 0xc1, 0xae, 0x28, 0x33,
	0x0b, 0xf9, 0xb5, 0x1e, 0x79, 0x45, 0xbf, 0x54, 0x60, 0x26, 0x82, 0x97, 0x77, 0x74, 0x19, 0x26,
	0x5d, 0xf9, 0xdc, 0xee, 0x38, 0x26, 0xca, 0xd7, 0xaa, 0x01, 0x71, 0xc3, 0x31, 0x91, 0x5c, 0x83,
	0xfa, 0x00, 0xd4, 0x43, 0xcf, 0x33, 0xf6, 0x83, 0x73, 0x99, 0x0a, 0xe8, 0xdb, 0x82, 0x1c, 0x49,
	0x2a, 0xf9, 0x68, 0x52, 0xf9, 0x59, 0x81, 0xe9, 0x07, 0xfd, 0xae, 0x63, 0x98, 0x3c, 0x3a, 0xa4,
	0xc6, 0x57, 0x41, 0x65, 0x9e, 0x96, 0x61, 0x9a, 0x16, 0x46, 0x7c, 0x3f, 0x6c, 0x99, 0x1a, 0xb6,
	0x8c, 0x59, 0xe0, 0x61, 0xc7, 0x45, 0xbf, 0xdd, 0x7f, 0xec, 0x1a, 0x9e, 0xd0, 0xac, 0xaa, 0x57,
	0x05, 0xf1, 0x3e, 0xa7, 0x91, 0x2b, 0x50, 0x43, 0x9b, 0xd9, 0x67, 0x06, 0xa8, 0x3c, 0x47, 0x4d,
	0x4a, 0xaa, 0x80, 0xd1, 0x5f, 0x15, 0x20, 0x61, 0x15, 0xc7, 0xe4, 0xa4, 0x79, 0x28, 0x72, 0x33,
	0x07, 0x3e, 0x2a, 0xb0, 0x65, 0xcb, 0x64, 0x37, 0xe4, 0xc8, 0xf0, 0xd1, 0xed, 0x19, 0xee, 0x93,
	0x01, 0x13, 0x95, 0x6b, 0x5a, 0x1f, 0x6c, 0x48, 0x2e, 0xf4, 0x53, 0x98, 0x15, 0x27, 0xfa, 0x3e,
	0x1e, 0xbd, 0x8e, 0x47, 0x4f, 0xe5, 0xb8, 0x90, 0xdb, 0xf3, 0xf1, 0x80, 0x3a, 0x17, 0x13, 0xff,
	0x0f, 0x7b, 0x8b, 0xb6, 0x61, 0x6e, 0xa8, 0x81, 0x48, 0x68, 0xd2, 0x05, 0x67, 0xcb, 0x7e, 0x21,
	0x1b, 0x73, 0x11, 0x1b, 0x9f, 0x2b, 0x30, 0x9f, 0x90, 0x30, 0x26, 0x2b, 0x17, 0xa1, 0x2c, 0xd4,
	0x19, 0xda, 0x59, 0x12, 0x84, 0x96, 0x49, 0xef, 0xc2, 0xf4, 0x26, 0x76, 0xd1, 0xc7, 0xf0, 0x39,
	0x47, 0xb3, 0xa1, 0x92, 0xc8, 0x86, 0x99, 0x66, 0x99, 0x40, 0xc2, 0xdc, 0xc6, 0x63, 0x10, 0xfd,
	0x18, 0xa6, 0x75, 0x64, 0x69, 0xfb, 0x2c, 0x3a, 0xa7, 0x65, 0xfd, 0xcc, 0x10, 0x34, 0x81, 0x84,
	0x25, 0x8c, 0xc9, 0x8e, 0x1f, 0x15, 0x98, 0xda, 0x76, 0x0e, 0xcf, 0x64, 0x46, 0x13, 0x2a, 0x26,
	0x7a, 0xbe, 0x65, 0xf3, 0xb2, 0x23, 0x39, 0x87, 0x49, 0x64, 0x0e, 0x0a, 0x9e, 0x73, 0xe0, 0x76,
	0x30, 0xb0, 0x49, 0xac, 0xb2, 0xd3, 0x1c, 0x01, 0xb5, 0xe3, 0xf4, 0x8f, 0x1b, 0x13, 0xbc, 0xcc,
	0xf0, 0x67, 0xba, 0x07, 0xf5, 0xa1, 0x66, 0x63, 0x32, 0x5f, 0x87, 0xf9, 0x3b, 0xe8, 0x8b, 0xe0,
	0xdf, 0x10, 0x15, 0xec, 0x2f, 0x07, 0xe0, 0x4f, 0x0a, 0x34, 0x92, 0x4c, 0xc7, 0x74, 0xb1, 0xd6,
	0x87, 0x85, 0x38, 0xcf, 0x93, 0x41, 0x46, 0x6b, 0x13, 0xa0, 0xe8, 0x0f, 0x0a, 0x9c, 0x63, 0xda,
	0x59, 0x5d, 0xfc, 0x9b, 0x0c, 0x26, 0x17, 0x00, 0x64, 0xaa, 0x7d, 0x82, 0xc7, 0xb2, 0xf4, 0x94,
	0x05, 0xe5, 0x3d, 0x3c, 0x66, 0x19, 0x9b, 0x77, 0x23, 0x6a, 0x66, 0x37, 0xc2, 0xf7, 0xe9, 0x77,
	0x0a, 0xcc, 0xc5, 0x35, 0x1b, 0x93, 0xd7, 0x82, 0x22, 0x92, 0x3f, 0xb9, 0x88, 0xd0, 0x0f, 0x80,
	0x48, 0x8d, 0x58, 0xdb, 0x19, 0x38, 0x6a, 0x05, 0xa6, 0x5c, 0xc7, 0x49, 0xe9, 0xf3, 0x6a, 0x8c,
	0xdc, 0x3a, 0x45, 0x88, 0xbc, 0x50, 0xf8, 0x94, 0x33, 0x64, 0x3c, 0x26, 0x3b, 0x57, 0x41, 0xf5,
	0x5d, 0x0c, 0xec, 0x8c, 0xd7, 0x09, 0xde, 0x4b, 0xeb, 0x1c, 0x41, 0x7f, 0x53, 0xa0, 0xf1, 0xa0,
	0xcf, 0xda, 0xca, 0xd7, 0x88, 0x8c, 0x25, 0xa8, 0xd8, 0x78, 0xd4, 0x0e, 0x02, 0x51, 0x54, 0x5a,
	0xb0, 0xf1, 0x48, 0xf2, 0xc9, 0x4c, 0x72, 0xd1, 0x76, 0x55, 0x3d, 0x45, 0xbb, 0x1a, 0x8d, 0xb5,
	0x89, 0x58, 0xac, 0xd1, 0x27, 0xb0, 0x90, 0x62, 0xc5, 0x98, 0x92, 0xc7, 0x47, 0x50, 0xdf, 0x79,
	0x6c, 0xb8, 0x67, 0xca, 0x9d, 0xd7, 0xa0, 0x2e, 0x3d, 0x11, 0x90, 0xc4, 0x9c, 0x54, 0xd6, 0xa7,
	0x84, 0x4b, 0x06, 0x64, 0xda, 0x81, 0xe9, 0x10, 0xfb, 0x31, 0xd9, 0xf0, 0x22, 0x07, 0x33, 0x9b,
	0xce, 0x91, 0x1d, 0x6f, 0x5c, 0x5f, 0x3b, 0x19, 0x2c, 0x42, 0x59, 0x24, 0xfb, 0x50, 0xa5, 0x17,
	0x84, 0xb4, 0x6e, 0x56, 0x4d, 0x69, 0xca, 0x56, 0x60, 0x6a, 0xd8, 0x26, 0x5a, 0x3d, 0xa6, 0xbc,
	0x38, 0xe7, 0xda, 0x80, 0xdc, 0x62, 0xd4, 0xf4, 0x7e, 0xb2, 0x20, 0x26, 0xae, 0x78, 0x3f, 0xc9,
	0xb8, 0x7a, 0x3e, 0xee, 0x1b, 0xb6, 0x33, 0x80, 0x16, 0x05, 0x57, 0x49, 0x0e, 0x3c, 0xf2, 0x8b,
	0x02, 0xb3, 0x51, 0x8f, 0xfc, 0xbb, 0x49, 0x28, 0x3c, 0x6b, 0xa9, 0x91, 0x59, 0xeb, 0xfa, 0x2d,
	0x50, 0xf9, 0xa5, 0x28, 0xc3, 0xc4, 0xbd, 0xdd, 0x77, 0xb7, 0xf4, 0xfa, 0xff, 0x48, 0x11, 0xf2,
	0x9b, 0xf7, 0x36, 0xea, 0x0a, 0x7b, 0xb8, 0xbf, 0x79, 0xbb, 0x9e, 0x63, 0x0f, 0xbb, 0x0f, 0x77,
	0xeb, 0x79, 0x86, 0xda, 0x7a, 0xb8, 0xb1, 0x75, 0xb7, 0xae, 0xb2, 0xc7, 0xd6, 0xf6, 0x3b, 0x77,
	0xb6, 0xea, 0x13, 0x37, 0x7f, 0xaf, 0x41, 0x8d, 0x09, 0xdb, 0x36, 0x6c, 0x63, 0x1f, 0x7b, 0xec,
	0xb6, 0x1e, 0x43, 0x25, 0x34, 0x4c, 0x91, 0x66, 0x54, 0xb3, 0xe4, 0x5c, 0xa6, 0x5d, 0x3a, 0x01,
	0x21, 0x6c, 0xa6, 0x57, 0xbe, 0x7a, 0xf5, 0xc7, 0xcb, 0xdc, 0x12, 0xd5, 0xd6, 0xf9, 0xd8, 0xcc,
	0x3f, 0xfe, 0x1c, 0xde, 0x58, 0xe7, 0xd3, 0xd3, 0x3a, 0x9f, 0x60, 0xf1, 0x6d, 0xe5, 0x3a, 0xf9,
	0x1c, 0x26, 0x23, 0x6d, 0x37, 0xa1, 0x69, 0xac, 0xa3, 0x23, 0x81, 0xb6, 0x7c, 0x22, 0x46, 0x2a,
	0x70, 0x99, 0x2b, 0x70, 0x91, 0x2e, 0x44, 0x15, 0x60, 0x8b, 0x90, 0xfc, 0xe7, 0x0a, 0x4c, 0xc5,
	0x7a, 0x62, 0x72, 0x39, 0x8b, 0x7d, 0xb8, 0x29, 0xd7, 0xae, 0x8c, 0x40, 0x49, 0x35, 0xae, 0x72,
	0x35, 0x9a, 0x74, 0x31, 0xa6, 0x06, 0x47, 0x85, 0x14, 0xf9, 0x5a, 0x81, 0x7a, 0xbc, 0x89, 0x20,
	0x31, 0x19, 0x19, 0x9d, 0x8b, 0x76, 0x75, 0x14, 0x2c, 0xea, 0x12, 0x72, 0x3e, 0x5d, 0x17, 0x29,
	0xf4, 0x0b, 0xa8, 0x45, 0xab, 0x32, 0x59, 0x4e, 0xf2, 0x4f, 0xd4, 0x0c, 0xed, 0xf2, 0xc9, 0x20,
	0xa9, 0x02, 0xe5, 0x2a, 0x9c, 0x27, 0x5a, 0xda, 0xa9, 0x48, 0x71, 0x3e, 0x54, 0x42, 0xb5, 0x32,
	0x1e, 0x8e, 0xc9, 0xfa, 0x1c, 0x0f, 0xc7, 0x94, 0x42, 0x4b, 0x9b, 0x5c, 0xae, 0x46, 0x1a, 0x69,
	0xe1, 0xc8, 0x0a, 0x22, 0xf9, 0x86, 0xcf, 0xf3, 0xb1, 0x52, 0x42, 0x62, 0xae, 0xcd, 0xaa, 0x98,
	0xda, 0xca, 0x48, 0xdc, 0x29, 0xc2, 0xf2, 0x80, 0xbf, 0xc5, 0xa2, 0xe1, 0x00, 0x60, 0x38, 0xd3,
	0x90, 0xa5, 0x28, 0xf3, 0xc4, 0xec, 0xa4, 0x35, 0xb3, 0x01, 0xa7, 0x10, 0x6b, 0x72, 0xb8, 0x14,
	0x3b, 0x1c, 0x41, 0xe2, 0x62, 0x13, 0xe3, 0x4f, 0x5c, 0x6c, 0x72, 0x7a, 0x39, 0x51, 0xac, 0xcb,
	0xe1, 0x4c, 0x6c, 0x0f, 0x4a, 0x41, 0xe3, 0x4f, 0x2e, 0x44, 0x79, 0xc6, 0x46, 0x15, 0xed, 0x62,
	0xd6, 0x76, 0x34, 0xbe, 0xe8, 0x7c, 0x8a, 0xc0, 0x9e, 0x73, 0x18, 0x58, 0x39, 0xfc, 0x2a, 0x12,
	0xb7, 0x32, 0xf1, 0x49, 0x27, 0x6e, 0x65, 0xf2, 0x83, 0xca, 0x88, 0x33, 0x65, 0x70, 0x26, 0xf6,
	0x29, 0x94, 0x07, 0xe5, 0x9d, 0xc4, 0xec, 0x88, 0xb7, 0x15, 0xda, 0x52, 0xe6, 0xbe, 0x94, 0xb9,
	0xcc, 0x65, 0x5e, 0xa0, 0x8d, 0x14, 0x99, 0x1e, 0x43, 0x33, 0x91, 0x9f, 0x41, 0x35, 0x5c, 0xd9,
	0x48, 0xec, 0xa2, 0xa4, 0xf4, 0x01, 0x1a, 0x3d, 0x09, 0x32, 0x22, 0xa7, 0xf1, 0x60, 0x92, 0x2f,
	0x30, 0xf1, 0x1e, 0x54, 0x42, 0x1f, 0xd2, 0x13, 0x75, 0x25, 0xf1, 0x49, 0x3e, 0x51, 0x57, 0x92,
	0x5f, 0xe1, 0xe9, 0x12, 0x97, 0xbd, 0x40, 0xd2, 0x0e, 0xd8, 0x63, 0x52, 0x3e, 0x81, 0x6a, 0xf8,
	0xff, 0x00, 0x49, 0x26, 0x87, 0xf8, 0xbf, 0x86, 0xb8, 0xcd, 0x69, 0xbf, 0x17, 0xe8, 0x25, 0x2e,
	0x77, 0x91, 0xce, 0xa5, 0x25, 0x10, 0x8b, 0x99, 0x7b, 0x4b, 0xfd, 0x30, 0xd7, 0xdf, 0xdb, 0x2b,
	0xf0, 0xdf, 0x1a, 0x6f, 0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0xef, 0xf6, 0xe0, 0x8d, 0x13, 0x19,
	0x00, 0x00,
}
